diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/CParticleSystemSceneNode.cpp hcraft_libs/irrlicht/source/Irrlicht/CParticleSystemSceneNode.cpp
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/CParticleSystemSceneNode.cpp
+++ hcraft_libs/irrlicht/source/Irrlicht/CParticleSystemSceneNode.cpp
@@ -263,4 +263,5 @@ void CParticleSystemSceneNode::doParticl
 	if (Emitter && IsVisible)
 	{
+	    updateAbsolutePosition();
 		SParticle* array = 0;
 		s32 newParticles = Emitter->emitt(now, timediff, array);
@@ -275,7 +276,22 @@ void CParticleSystemSceneNode::doParticl
 			{
 				AbsoluteTransformation.rotateVect(array[i].startVector);
+				if (!ParticlesAreGlobal)
+				{
+                    AbsoluteTransformation.rotateVect(array[i].pos);
+                    AbsoluteTransformation.rotateVect(array[i].vector);
+				}
 
 				if (ParticlesAreGlobal)
-					AbsoluteTransformation.transformVect(array[i].pos);
+				{
+				    // MICHA: avoid gaps when spawning particles for fast moving objects
+				    core::vector3df pos1(array[i].pos);
+				    core::vector3df pos2(pos1);
+				    OldAbsoluteTransformation.transformVect(pos1);
+				    AbsoluteTransformation.transformVect(pos2);
+                    f32 randInterpolate = (float)(os::Randomizer::rand() % 100) / 100.f;
+				    array[i].pos = randInterpolate*pos1 + (1-randInterpolate)*pos2;
+
+					// AbsoluteTransformation.transformVect(array[i].pos);
+				}
 
 				Particles[j+i]=array[i];
@@ -284,4 +300,8 @@ void CParticleSystemSceneNode::doParticl
 	}
 
+     OldAbsoluteTransformation = AbsoluteTransformation;
+
+    if ( IsVisible )    // MICHA: i don't care about that stuff when particles are not visible
+    {
 	// run affectors
 	core::list<IParticleAffector*>::Iterator ait = AffectorList.begin();
@@ -300,5 +320,9 @@ void CParticleSystemSceneNode::doParticl
 	{
 		if (now > Particles[i].endTime)
-			Particles.erase(i);
+            {
+                // faster delete is important here
+                Particles[i] = Particles[Particles.size()-1];
+                Particles.erase( Particles.size()-1 );
+            }
 		else
 		{
@@ -326,4 +350,5 @@ void CParticleSystemSceneNode::doParticl
 	}
 }
+}
 
 
@@ -502,4 +527,9 @@ void CParticleSystemSceneNode::deseriali
 }
 
+void CParticleSystemSceneNode::setVisible(bool isVisible)
+{
+    Particles.set_used(0);
+    IParticleSystemSceneNode::setVisible(isVisible);
+}
 
 } // end namespace scene
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/CParticleSystemSceneNode.h hcraft_libs/irrlicht/source/Irrlicht/CParticleSystemSceneNode.h
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/CParticleSystemSceneNode.h	2006-12-04 16:19:49.000000000 +0100
+++ hcraft_libs/irrlicht/source/Irrlicht/CParticleSystemSceneNode.h	2006-12-07 21:16:36.000000000 +0100
@@ -107,4 +107,7 @@ public:
 	virtual ESCENE_NODE_TYPE getType() { return ESNT_PARTICLE_SYSTEM; }
 
+	// MICHA: i need to clear particles to avoid artifacts
+    virtual void setVisible(bool isVisible);
+
 private:
 
@@ -130,4 +133,7 @@ private:
 
 	bool ParticlesAreGlobal;
+
+	// MICHA: i need old position so i can avoid gaps for particles emitted for fast moving nodes
+	core::matrix4 OldAbsoluteTransformation;
 };
 
