diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/include/S3DVertex.h hcraft_libs/irrlicht/include/S3DVertex.h
--- svn_hcraft_1.2/irrlicht/include/S3DVertex.h	2006-12-04 16:19:50.000000000 +0100
+++ hcraft_libs/irrlicht/include/S3DVertex.h	2006-12-05 13:05:52.000000000 +0100
@@ -68,4 +68,18 @@ struct S3DVertex
 			Color != other.Color || TCoords != other.TCoords);
 	}
+
+	//! using the position for this
+	bool operator < (const S3DVertex& other) const
+	{
+	    return Pos.X < other.Pos.X
+                || (Pos.X == other.Pos.X && Pos.Y < other.Pos.Y)
+                || (Pos.X == other.Pos.X && Pos.Y == other.Pos.Y && Pos.Z < other.Pos.Z);
+	}
+
+	bool equals(const S3DVertex& other) const
+	{
+	    return (Pos.equals(other.Pos) && Normal.equals(other.Normal) &&
+					Color == other.Color && TCoords == other.TCoords);
+	}
 };
 
@@ -113,4 +127,12 @@ struct S3DVertex2TCoords
 	core::vector2d<f32> TCoords2;
 
+	//! using the position for this
+	bool operator < (const S3DVertex& other) const
+	{
+	    return Pos.X < other.Pos.X
+                || (Pos.X == other.Pos.X && Pos.Y < other.Pos.Y)
+                || (Pos.X == other.Pos.X && Pos.Y == other.Pos.Y && Pos.Z < other.Pos.Z);
+	}
+
 	bool operator == (const S3DVertex2TCoords& other) const
 	{
@@ -126,4 +148,10 @@ struct S3DVertex2TCoords
 			TCoords2 != other.TCoords2);
 	}
+
+	bool equals(const S3DVertex2TCoords& other) const
+	{
+	    return (Pos.equals(other.Pos) && Normal.equals(other.Normal) &&
+					Color == other.Color && TCoords == other.TCoords && TCoords2 == other.TCoords2);
+	}
 };
 
@@ -164,4 +192,12 @@ struct S3DVertexTangents
 	core::vector3df Binormal;
 
+	//! using the position for this
+	bool operator < (const S3DVertex& other) const
+	{
+	    return Pos.X < other.Pos.X
+                || (Pos.X == other.Pos.X && Pos.Y < other.Pos.Y)
+                || (Pos.X == other.Pos.X && Pos.Y == other.Pos.Y && Pos.Z < other.Pos.Z);
+	}
+
 	bool operator == (const S3DVertexTangents& other) const
 	{
@@ -177,4 +213,11 @@ struct S3DVertexTangents
 			Tangent != other.Tangent || Binormal != other.Binormal);
 	}
+
+	bool equals(const S3DVertexTangents& other) const
+	{
+        return (Pos.equals(other.Pos) && Normal.equals(other.Normal) &&
+					Color == other.Color && TCoords == other.TCoords
+					&& Tangent.equals(other.Tangent) && Binormal.equals(other.Binormal));
+	}
 };
 
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.cpp hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.cpp
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.cpp	
+++ hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.cpp
@@ COpenGLDriver::COpenGLDriver(const core:
 {
+//    VertexPrimitiveListSorted = false;
 	#ifdef _DEBUG
 	setDebugName("COpenGLDriver");
@@ -215,4 +236,5 @@ COpenGLDriver::COpenGLDriver(const core:
 	CurrentRendertargetSize(0,0), _device(device)
 {
+//    VertexPrimitiveListSorted = false;
 	#ifdef _DEBUG
 	setDebugName("COpenGLDriver");
@@ -260,4 +291,5 @@ COpenGLDriver::COpenGLDriver(const core:
 #endif
 {
+//    VertexPrimitiveListSorted = false;
 	#ifdef _DEBUG
 	setDebugName("COpenGLDriver");
@@ void COpenGLDriver::setTransform(E_TRANS
 }
 
-
+//////! MICHA:  sort transparent polygons back-to-front. Didn't change anything.
+//void COpenGLDriver::drawSortedVertexPrimitiveList(const void* vertices, s32 vertexCount, const u16* indexList, s32 primitiveCount, E_VERTEX_TYPE vType, scene::E_PRIMITIVE_TYPE pType)
+//{
+//    VertexPrimitiveListSorted = true;
+//
+//    core::vector3df cam(getTransform(ETS_VIEW).getTranslation());
+//
+//    VertexSortBuffer.set_used(primitiveCount);
+//    switch (vType)
+//	{
+//		case EVT_STANDARD:
+//		{
+//            const S3DVertex* p = (const S3DVertex*)vertices;
+//            for ( s32 i=0; i < primitiveCount; ++i )
+//            {
+//                core::vector3df center( (p + indexList[i*3])->Pos + (p + indexList[i*3+1])->Pos + (p + indexList[i*3+2])->Pos );
+//                center *= 1/3;
+//                f32 distance = cam.getDistanceFromSQ(center);
+//                VertexSortBuffer[i] = SortVerticesBackToFront(i*3, distance);
+//            }
+//		}
+//        break;
+//        case EVT_2TCOORDS:
+//        {
+//            const S3DVertex2TCoords* p = (const S3DVertex2TCoords*)vertices;
+//            for ( s32 i=0; i < primitiveCount; ++i )
+//            {
+//                core::vector3df center( (p + indexList[i*3])->Pos + (p + indexList[i*3+1])->Pos + (p + indexList[i*3+2])->Pos );
+//                center *= 1/3;
+//                f32 distance = cam.getDistanceFromSQ(center);
+//                VertexSortBuffer[i] = SortVerticesBackToFront(i*3, distance);
+//            }
+//        }
+//        break;
+//        case EVT_TANGENTS:
+//        {
+//            const S3DVertexTangents* p = (const S3DVertexTangents*)vertices;
+//            for ( s32 i=0; i < primitiveCount; ++i )
+//            {
+//                core::vector3df center( (p + indexList[i*3])->Pos + (p + indexList[i*3+1])->Pos + (p + indexList[i*3+2])->Pos );
+//                center *= 1/3;
+//                f32 distance = cam.getDistanceFromSQ(center);
+//                VertexSortBuffer[i] = SortVerticesBackToFront(i*3, distance);
+//            }
+//        }
+//        break;
+//	}
+//	VertexSortBuffer.set_sorted(false);
+//	VertexSortBuffer.sort();
+//
+//	SortedIndexList.set_used(primitiveCount*3);
+//	for ( s32 i=0; i < primitiveCount; ++i )
+//	{
+//	    SortedIndexList[i*3] = indexList[ VertexSortBuffer[i].FirstIndex ];
+//	    SortedIndexList[i*3+1] = indexList[ VertexSortBuffer[i].FirstIndex+1 ];
+//	    SortedIndexList[i*3+2] = indexList[ VertexSortBuffer[i].FirstIndex+2 ];
+//	}
+//
+//    drawVertexPrimitiveList(vertices, vertexCount, &SortedIndexList[0], primitiveCount, vType, pType);
+//    VertexPrimitiveListSorted = false;
+//}
@@ void COpenGLDriver::drawVertexPrimitiveL
 		return;
 
+
+//    // MICHA: i tried to sort transparent polyogons (additionally to object sorting in scenemanager)
+//    // TODO: lazy micha solves it only for triangles.
+//    if ( !VertexPrimitiveListSorted
+//        &&   (Material.MaterialType < EMT_TRANSPARENT_ADD_COLOR || Material.MaterialType > EMT_TRANSPARENT_REFLECTION_2_LAYER )
+//        && pType == scene::EPT_TRIANGLES )
+////    if ( !VertexPrimitiveListSorted && Material.MaterialType == EMT_TRANSPARENT_ALPHA_CHANNEL && pType == scene::EPT_TRIANGLES )
+//    {
+//        drawSortedVertexPrimitiveList(vertices, vertexCount, indexList, primitiveCount, vType, pType);
+//        return;
+//    }
+
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.h hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.h
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.h
+++ hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.h
@@ namespace video
 	private:
 
+////        //! MICHA: transparent polygons should be sorted back-to-front (thrown out again as the problem wasn't here but in materials)
+//		void drawSortedVertexPrimitiveList(const void* vertices, s32 vertexCount, const u16* indexList, s32 primitiveCount, E_VERTEX_TYPE vType, scene::E_PRIMITIVE_TYPE pType);
+//		bool VertexPrimitiveListSorted;
+//        struct SortVerticesBackToFront
+//		{
+//			SortVerticesBackToFront() {};
+//
+//			SortVerticesBackToFront(u16 firstIndex, f32 distance)
+//			{
+//				FirstIndex = firstIndex;
+//                Distance = distance;
+//			}
+//
+//			u16 FirstIndex;
+//			f32 Distance;
+//
+//			bool operator < (const SortVerticesBackToFront& other) const
+//			{
+//                return (Distance < other.Distance); // front-to-back
+////				return (Distance > other.Distance); // back-to-front
+//			}
+//		};
+//		core::array<SortVerticesBackToFront> VertexSortBuffer;
+//		core::array<u16> SortedIndexList;
+
 		//! inits the parts of the open gl driver used on all platforms
 		bool genericDriverInit(const core::dimension2d<s32>& screenSize);
