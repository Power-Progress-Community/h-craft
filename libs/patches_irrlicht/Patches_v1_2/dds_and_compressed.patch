diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/include/IImage.h hcraft_libs/irrlicht/include/IImage.h
--- svn_hcraft_1.2/irrlicht/include/IImage.h	2006-12-04 16:19:50.000000000 +0100
+++ hcraft_libs/irrlicht/include/IImage.h	2007-02-27 00:21:35.000000000 +0100
@@ -33,7 +33,33 @@ enum ECOLOR_FORMAT
 	//! Default 32 bit color format. 8 bits are used for every component:
 	//! red, green, blue and alpha.
-	ECF_A8R8G8B8
+	ECF_A8R8G8B8,
+
+    //! Uncompressed 32bit format
+    ECF_BGRA8,
+
+    //! DXT1 format, using no or 1bit Alpha
+    ECF_DXT1,
+
+    //! DXT3 format, using 4bit Alpha
+    ECF_DXT3,
+
+    //! DXT5 format, using 4bit interpolated Alpha
+    ECF_DXT5
 };
 
+enum EIMAGE_TYPE
+{
+    //! Plain old 2d image
+    EIT_IMAGE_2D = 1,
+
+    //! Source for a volume texture
+    EIT_IMAGE_3D = 2,
+
+    //! Source for a cube map
+    EIT_CUBE_MAP = 4,
+
+    //! Source contains Mipmaps
+    EIT_MIPMAPS = 8
+};
 
 //!	Interface for software image data.
@@ -82,4 +108,10 @@ public:
 	virtual ECOLOR_FORMAT getColorFormat() const = 0;
 
+	//! returns the image type
+	virtual EIMAGE_TYPE getImageType() const = 0;
+
+	//! returns the number of mip maps
+	virtual u32 getNumMipMaps() const = 0;
+
 	//! returns mask for red value of a pixel
 	virtual u32 getRedMask() = 0;
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImageLoaderDDS.cpp hcraft_libs/irrlicht/source/Irrlicht/CImageLoaderDDS.cpp
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImageLoaderDDS.cpp	1970-01-01 00:00:00.000000000 +0000
+++ hcraft_libs/irrlicht/source/Irrlicht/CImageLoaderDDS.cpp	2006-05-26 18:52:18.000000000 +0100
@@ -0,0 +1,85 @@
+// Copyright (C) 2002-2005 Nikolaus Gebhardt
+// This file is part of the "Irrlicht Engine".
+// For conditions of distribution and use, see copyright notice in irrlicht.h
+
+#include "CImageLoaderDDS.h"
+#include <string.h>
+#include "SColor.h"
+#include "CColorConverter.h"
+#include "CImage.h"
+#include "os.h"
+
+namespace irr
+{
+namespace video
+{
+
+
+//! constructor
+CImageLoaderDDS::CImageLoaderDDS()
+: DDSData(0)
+{
+	#ifdef _DEBUG
+	setDebugName("CImageLoaderDDS");
+	#endif
+}
+
+//! destructor
+CImageLoaderDDS::~CImageLoaderDDS()
+{
+	if (DDSData)delete [] DDSData;
+}
+
+//! returns true if the file maybe is able to be loaded by this class
+//! based on the file extension (e.g. ".tga")
+bool CImageLoaderDDS::isALoadableFileExtension(const c8* fileName)
+{
+	return strstr(fileName, ".dds") != 0;
+}
+
+//! returns true if the file maybe is able to be loaded by this class
+bool CImageLoaderDDS::isALoadableFileFormat(irr::io::IReadFile* file)
+{
+	u32 headerID;
+	file->read(&headerID, sizeof(u32));
+	return headerID == 0x20534444;
+}
+
+//! creates a surface from the file
+IImage* CImageLoaderDDS::loadImage(irr::io::IReadFile* file)
+{
+	ddsHeader header;
+	file->read(&header, sizeof(header));
+
+	EIMAGE_TYPE type = EIT_IMAGE_2D;
+	if (header.Magic != 0x20534444)	return 0;
+	if (header.MipMapCount>1) header.Size<<=1;
+	if (header.Caps2) {
+		header.Size*=6;
+		type=EIT_CUBE_MAP;
+	}
+
+	ECOLOR_FORMAT fmt = ECF_BGRA8;
+	switch(header.FourCC) {
+		case 0x31545844: fmt = ECF_DXT1; break;
+		case 0x33545844: fmt = ECF_DXT3; break;
+		case 0x35545844: fmt = ECF_DXT5; break;
+	}
+
+	IImage* image = new CImage(fmt, core::dimension2d<s32>(header.Width, header.Height), 
+				header.Size, header.MipMapCount, type);
+	file->read(image->lock(), header.Size);
+	image->unlock();
+	return image;
+}
+
+
+//! creates a loader which is able to load windows bitmaps
+IImageLoader* createImageLoaderDDS()
+{
+	return new CImageLoaderDDS;
+}
+
+
+} // end namespace video
+} // end namespace irr
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImageLoaderDDS.h hcraft_libs/irrlicht/source/Irrlicht/CImageLoaderDDS.h
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImageLoaderDDS.h	1970-01-01 00:00:00.000000000 +0000
+++ hcraft_libs/irrlicht/source/Irrlicht/CImageLoaderDDS.h	2006-05-26 18:52:18.000000000 +0100
@@ -0,0 +1,91 @@
+#ifndef __C_IMAGE_LOADER_DDS_H_INCLUDED__
+#define __C_IMAGE_LOADER_DDS_H_INCLUDED__
+
+#include "IImageLoader.h"
+
+
+namespace irr
+{
+namespace video
+{
+
+	// byte-align structures
+#ifdef _MSC_VER
+#	pragma pack( push, packing )
+#	pragma pack( 1 )
+#	define PACK_STRUCT
+#elif defined( __GNUC__ )
+#	define PACK_STRUCT	__attribute__((packed))
+#else
+#	error compiler not supported
+#endif
+
+struct ddsHeader{
+	unsigned Magic;
+	unsigned HeaderSize;
+	unsigned DDSFlags;
+	unsigned Height;
+	unsigned Width;
+	unsigned Size;
+	unsigned Depth;
+	unsigned MipMapCount;
+	unsigned Reserved[11];
+
+	unsigned PFSize;
+	unsigned PFFlags;
+	unsigned FourCC;
+	unsigned RGBBitCount;
+	unsigned RBitMask;
+	unsigned GBitMask;
+	unsigned BBitMask;
+	unsigned AlphaBitMask;
+    
+	unsigned Caps1;
+	unsigned Caps2;
+	unsigned DDSX;
+	unsigned Whatever[2];
+};
+
+
+// Default alignment
+#ifdef _MSC_VER
+#	pragma pack( pop, packing )
+#endif
+
+#undef PACK_STRUCT
+
+
+/*!
+	Surface Loader for Microsoft DDS bitmaps
+*/
+class CImageLoaderDDS : public IImageLoader
+{
+public:
+
+	//! constructor
+	CImageLoaderDDS();
+
+	//! destructor
+	virtual ~CImageLoaderDDS();
+
+	//! returns true if the file maybe is able to be loaded by this class
+	//! based on the file extension (e.g. ".tga")
+	virtual bool isALoadableFileExtension(const c8* fileName);
+
+	//! returns true if the file maybe is able to be loaded by this class
+	virtual bool isALoadableFileFormat(irr::io::IReadFile* file);
+
+	//! creates a surface from the file
+	virtual IImage* loadImage(irr::io::IReadFile* file);
+
+private:
+	c8* DDSData;
+};
+
+
+} // end namespace video
+} // end namespace irr
+
+
+#endif
+
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.h hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.h
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.h
+++ hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.h
@@ -400,7 +457,5 @@ namespace video
 			PFNGLSTENCILFUNCSEPARATEATIPROC pGlStencilFuncSeparateATI;
 			PFNGLSTENCILOPSEPARATEATIPROC pGlStencilOpSeparateATI;
-				#ifdef PFNGLCOMPRESSEDTEXIMAGE2DPROC
 					PFNGLCOMPRESSEDTEXIMAGE2DPROC pGlCompressedTexImage2D;
-				#endif // PFNGLCOMPRESSEDTEXIMAGE2DPROC
 			#ifdef _IRR_WINDOWS_
 			typedef BOOL (APIENTRY *PFNWGLSWAPINTERVALFARPROC)(int);
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLTexture.cpp hcraft_libs/irrlicht/source/Irrlicht/COpenGLTexture.cpp
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLTexture.cpp	2006-12-04 16:19:49.000000000 +0100
+++ hcraft_libs/irrlicht/source/Irrlicht/COpenGLTexture.cpp	2007-07-08 19:05:02.000000000 +0100
@@ -19,4 +19,6 @@ namespace video
@@ -228,4 +237,28 @@ void COpenGLTexture::getImageData(IImage
 	}
 
+    /* // included from festinis compressedTexture.patch
+	Note that the following part will only be used for images with a color format that is only used for dds files.
+	Nothing but DDS should be affected by any of these changes.
+
+	This part assumes that the image already has proper dimensions and especially for 3D or cubemaps the
+	dimensions will obviously contain nonsense. The ImageDate will also be deleted after creating the texture
+	as a) editing it wouldn't make too much sense and b) with OpenGLs internal copy there is no reason to have
+	three completely redundant and memory wasting copies flying around. If there is any need to touch the image
+	data, OpenGL should be asked to return a pointer to it.
+	*/
+	Type = image->getImageType();
+	ECOLOR_FORMAT fmt = image->getColorFormat();
+	NumMipMaps = image->getNumMipMaps();
+	if (fmt==ECF_BGRA8 || fmt==ECF_DXT1 || fmt==ECF_DXT3 || fmt==ECF_DXT5)
+	{
+		ColorFormat = fmt;
+		ImageSize = image->getDimension();
+		ImageData = new u8[image->getImageDataSizeInBytes()];
+		memcpy(ImageData, (u8*)image->lock(), image->getImageDataSizeInBytes());
+		image->unlock();
+		return;
+	}
+	// end of festinis compressedTexture.patch
+
 	ImageSize = image->getDimension();
 	OriginalSize = ImageSize;
@@ -312,4 +361,7 @@ void COpenGLTexture::copyTexture(bool ne
 		os::Printer::log("Could not bind Texture", ELL_ERROR);
 
+    bool compressed=false;
+    int blockSize = 16;
+
 	switch (ColorFormat)
 	{
@@ -334,4 +386,17 @@ void COpenGLTexture::copyTexture(bool ne
 			PixelType=GL_UNSIGNED_INT_8_8_8_8_REV;
 			break;
+        case ECF_DXT1:
+            InternalFormat=GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
+            compressed=true;
+            blockSize=8;
+            break;
+        case ECF_DXT3:
+            InternalFormat = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;
+            compressed=true;
+            break;
+        case ECF_DXT5:
+            InternalFormat= GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;
+            compressed=true;
+            break;
 		default:
 			os::Printer::log("Unsupported texture format", ELL_ERROR);
@@ -340,5 +405,6 @@ void COpenGLTexture::copyTexture(bool ne
 
 	#ifndef DISABLE_MIPMAPPING
-	if (HasMipMaps && Driver && Driver->queryFeature(EVDF_MIP_MAP_AUTO_UPDATE))
+	if (HasMipMaps && Driver && Driver->queryFeature(EVDF_MIP_MAP_AUTO_UPDATE)
+        && (!compressed || NumMipMaps <= 1) )
 	{
 		// automatically generate and update mipmaps
@@ -346,9 +412,43 @@ void COpenGLTexture::copyTexture(bool ne
 		AutomaticMipmapUpdate=true;
 	}
-	else
+	else if ( !compressed )
 	{
 		AutomaticMipmapUpdate=false;
 		regenerateMipMapLevels();
 	}
+
+	if ( compressed )
+	{
+	    if ( NumMipMaps <= 1 )
+	    {
+            int levelSize = ((ImageSize.Width+3)/4)*((ImageSize.Height+3)/4)*blockSize;
+			Driver->extGlCompressedTexImage2D(GL_TEXTURE_2D, 0, InternalFormat, ImageSize.Width,
+				ImageSize.Height, 0, levelSize, ImageData);
+			if (Driver->testGLError())
+                os::Printer::log("Could not glCompressedTexImage2D (no mipmaps)", ELL_ERROR);
+//            HasMipMaps = false;
+		}
+	    else
+	    {
+	        int lvlSize;
+            int width = ImageSize.Width;
+            int height = ImageSize.Height;
+            for (unsigned i=0, offset=0; i<NumMipMaps; ++i)
+            {
+                lvlSize = ((width+3)/4)*((height+3)/4)*blockSize;
+                Driver->extGlCompressedTexImage2D(GL_TEXTURE_2D, i, InternalFormat,
+                        width, height, 0, lvlSize, (u8*)ImageData + offset);
+                if (Driver->testGLError())
+                    os::Printer::log("Could not glCompressedTexImage2D (with mipmap)", ELL_ERROR);
+                offset += lvlSize;
+                if ( width>1 )
+                    width >>= 1;
+                if ( height>1 )
+                    height >>= 1;
+            }
+            HasMipMaps = true;
+	    }
+	}
+
 	if (HasMipMaps) // might have changed in regenerateMipMapLevels
 	{
@@ -367,4 +467,8 @@ void COpenGLTexture::copyTexture(bool ne
 		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
 	}
+
+	if ( compressed )
+        return;
+
 	if (newTexture)
 		glTexImage2D(GL_TEXTURE_2D, 0, InternalFormat, ImageSize.Width,
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLTexture.h hcraft_libs/irrlicht/source/Irrlicht/COpenGLTexture.h
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLTexture.h
+++ hcraft_libs/irrlicht/source/Irrlicht/COpenGLTexture.h
@@ -74,4 +74,7 @@ public:
 	virtual ECOLOR_FORMAT getColorFormat() const;
 
+	//! returns type flags of texture
+	virtual EIMAGE_TYPE getImageType() const    { return Type; }
+
 	//! returns pitch of texture (in bytes)
 	virtual s32 getPitch();
@@ -113,4 +124,6 @@ private:
 	u8* ImageData;
 	ECOLOR_FORMAT ColorFormat;
+    EIMAGE_TYPE Type;
+    u32 NumMipMaps;
 	COpenGLDriver* Driver;
 
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.cpp hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.cpp
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/COpenGLDriver.cpp	
+++ hcraft_libs/irrlicht/source/Irrlicht/COpenGLDriver.cpp
@@ -52,7 +55,5 @@ COpenGLDriver::COpenGLDriver(const core:
 	pGlStencilFuncSeparate(0), pGlStencilOpSeparate(0),
 	pGlStencilFuncSeparateATI(0), pGlStencilOpSeparateATI(0),
-	#ifdef PFNGLCOMPRESSEDTEXIMAGE2DPROC
 		pGlCompressedTexImage2D(0),
-	#endif // PFNGLCOMPRESSEDTEXIMAGE2DPROC
 #endif // _IRR_OPENGL_USE_EXTPOINTER_
 	wglSwapIntervalEXT(0)
@@ COpenGLDriver::COpenGLDriver(const core:
 	pGlGenProgramsARB(0), pGlBindProgramARB(0), pGlProgramStringARB(0),
 	pGlDeleteProgramsARB(0), pGlProgramLocalParameter4fvARB(0)
-		#ifdef PFNGLCOMPRESSEDTEXIMAGE2DPROC
 			,pGlCompressedTexImage2D(0)
-		#endif // PFNGLCOMPRESSEDTEXIMAGE2DPROC
@@ -533,7 +572,5 @@ void COpenGLDriver::loadExtensions()
 		pGlStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC) wglGetProcAddress("glStencilOpSeparateATI");
 
-		#ifdef PFNGLCOMPRESSEDTEXIMAGE2DPROC
 		pGlCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) wglGetProcAddress("glCompressedTexImage2D");
-		#endif // PFNGLCOMPRESSEDTEXIMAGE2DPROC
 
         // FrameBufferObjects
@@ -662,8 +712,6 @@ void COpenGLDriver::loadExtensions()
 				IRR_OGL_LOAD_EXTENSION(reinterpret_cast<const GLubyte*>("glStencilOpSeparateATI"));
 
-			#ifdef PFNGLCOMPRESSEDTEXIMAGE2DPROC
 			pGlCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)
 				IRR_OGL_LOAD_EXTENSION(reinterpret_cast<const GLubyte*>("glCompressedTexImage2D"));
-			#endif // PFNGLCOMPRESSEDTEXIMAGE2DPROC
 
 #ifdef GLX_SGI_swap_control
@@ -2542,8 +3186,6 @@ void COpenGLDriver::extGlCompressedTexIm
 {
 #ifdef _IRR_OPENGL_USE_EXTPOINTER_
-	#ifdef PFNGLCOMPRESSEDTEXIMAGE2DPROC
 		if (pGlCompressedTexImage2D)
 			pGlCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
-	#endif // PFNGLCOMPRESSEDTEXIMAGE2DPROC
 #else
 	glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImage.cpp hcraft_libs/irrlicht/source/Irrlicht/CImage.cpp
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImage.cpp	2006-12-04 16:19:49.000000000 +0100
+++ hcraft_libs/irrlicht/source/Irrlicht/CImage.cpp	2007-02-27 00:26:34.000000000 +0100
@@ -934,6 +934,7 @@ namespace video  
 
 //! constructor
-CImage::CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size)
-: Format(format), Size(size), Data(0)
+CImage::CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size, EIMAGE_TYPE type)
+: Format(format), Size(size), Data(0), DataSize(0)
+, Type(type), NumMipMaps(0)
 {
 	initData();	
@@ -943,6 +944,7 @@ CImage::CImage(ECOLOR_FORMAT format, con
 //! constructor
 CImage::CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size, void* data,
-			   bool ownForeignMemory)
-: Format(format), Size(size), Data(0)
+			   bool ownForeignMemory, EIMAGE_TYPE type)
+: Format(format), Size(size), Data(0), DataSize(0)
+, Type(type), NumMipMaps(0)
 {
 	if (ownForeignMemory)
@@ -963,6 +965,7 @@ CImage::CImage(ECOLOR_FORMAT format, con
 
 //! constructor 
-CImage::CImage(ECOLOR_FORMAT format, IImage* imageToCopy)
-: Format(format), Data(0)
+CImage::CImage(ECOLOR_FORMAT format, IImage* imageToCopy, EIMAGE_TYPE type)
+: Format(format), Data(0), DataSize(0)
+, Type(type), NumMipMaps(0)
 {
 	if (!imageToCopy)
@@ -981,6 +984,7 @@ CImage::CImage(ECOLOR_FORMAT format, IIm
 //! constructor
 CImage::CImage(IImage* imageToCopy, const core::position2d<s32>& pos,
-		   const core::dimension2d<s32>& size)
- : Data(0), Size(0,0)
+		   const core::dimension2d<s32>& size, EIMAGE_TYPE type)
+ : Data(0), DataSize(0), Size(0,0)
+ , Type(type), NumMipMaps(0)
 {
 	if (!imageToCopy)
@@ -996,4 +1000,10 @@ CImage::CImage(IImage* imageToCopy, cons
 }
 
+//! constructor for compressed images
+CImage::CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size, u32 dataSize, u32 numMips, EIMAGE_TYPE type)
+    : Format(format), Size(size), DataSize(dataSize), NumMipMaps(numMips), Type(type)
+{
+    Data = new s8[DataSize];
+}
 
 
@@ -1008,5 +1018,8 @@ void CImage::initData()
 
 	if (!Data)
-		Data = new s8[Size.Height * Pitch];
+	{
+	    DataSize = Size.Height * Pitch;
+		Data = new s8[DataSize];
+	}
 }
 
@@ -1061,5 +1074,5 @@ s32 CImage::getBytesPerPixel()
 s32 CImage::getImageDataSizeInBytes()
 {
-	return Pitch * Size.Height;
+	return DataSize;
 }
 
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImage.h hcraft_libs/irrlicht/source/Irrlicht/CImage.h
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/CImage.h	2006-12-04 16:19:49.000000000 +0100
+++ hcraft_libs/irrlicht/source/Irrlicht/CImage.h	2007-02-27 00:25:24.000000000 +0100
@@ -20,5 +20,5 @@ public:
 
 	//! constructor 
-	CImage(ECOLOR_FORMAT format, IImage* imageToCopy);
+	CImage(ECOLOR_FORMAT format, IImage* imageToCopy, EIMAGE_TYPE type=EIT_IMAGE_2D);
 
 	//! constructor 
@@ -27,12 +27,15 @@ public:
 	//! data when the image will be destructed. If false, the memory will by copied.
 	CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size,
-		void* data, bool ownForeignMemory=true);
+		void* data, bool ownForeignMemory=true, EIMAGE_TYPE type=EIT_IMAGE_2D);
 
 	//! constructor
-	CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size);
+	CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size, EIMAGE_TYPE type=EIT_IMAGE_2D);
 
 	//! constructor
 	CImage(IImage* imageToCopy,
-		const core::position2d<s32>& pos, const core::dimension2d<s32>& size);
+		const core::position2d<s32>& pos, const core::dimension2d<s32>& size, EIMAGE_TYPE type=EIT_IMAGE_2D);
+
+    //! constructor for compressed images
+    CImage(ECOLOR_FORMAT format, const core::dimension2d<s32>& size, u32 dataSize, u32 numMips, EIMAGE_TYPE type=EIT_IMAGE_2D);
 
 	//! destructor
@@ -81,4 +84,7 @@ public:
 	virtual ECOLOR_FORMAT getColorFormat() const;
 
+	virtual EIMAGE_TYPE getImageType() const    { return Type; }
+    virtual u32 getNumMipMaps() const           { return NumMipMaps; }
+
 	//! draws a rectangle
 	void drawRectangle(const core::rect<s32>& rect, const SColor &color);
@@ -118,4 +124,5 @@ private:
 
 	void* Data;
+	s32 DataSize;
 	core::dimension2d<s32> Size;
 	s32 BitsPerPixel;
@@ -123,4 +130,6 @@ private:
 	u32 Pitch;
 	ECOLOR_FORMAT Format;
+    EIMAGE_TYPE Type;
+    u32 NumMipMaps;
 
 	u32 RedMask;
diff -U 2 -H -b -w -B -E -d -p -r -N -x '*.svn' -x '*.d' -- svn_hcraft_1.2/irrlicht/source/Irrlicht/CNullDriver.cpp hcraft_libs/irrlicht/source/Irrlicht/CNullDriver.cpp
--- svn_hcraft_1.2/irrlicht/source/Irrlicht/CNullDriver.cpp
+++ hcraft_libs/irrlicht/source/Irrlicht/CNullDriver.cpp
@@ -35,4 +35,6 @@ IImageLoader* createImageLoaderPCX();
 IImageLoader* createImageLoaderPNG();
 
+//! creates a loader which is able to load dds images
+IImageLoader* createImageLoaderDDS();
 
 //! creates a loader which is able to load bmp images
@@ -115,4 +117,5 @@ CNullDriver::CNullDriver(io::IFileSystem
 	SurfaceLoader.push_back(video::createImageLoaderPCX());
 	SurfaceLoader.push_back(video::createImageLoaderPNG());
+	SurfaceLoader.push_back(video::createImageLoaderDDS());
 
 	SurfaceWriter.push_back(video::createImageWriterBMP());
